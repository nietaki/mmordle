# create this in .github/workflows/ci.yml
on: push

jobs:
  test:
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15.2
        env:
          POSTGRES_USER: postgres_dev_user
          POSTGRES_PASSWORD: postgres_dev_passwd
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: 54327:5432
    runs-on: ubuntu-latest
    name: OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      matrix:
        otp: ['25.3']
        elixir: ['1.13.0', '1.14.3']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      - run: mix deps.get
      - run: mix test
      - run: mix format --check-formatted

      # # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      # - name: Restore PLT cache
      #   uses: actions/cache@v2
      #   id: plt_cache
      #   with:
      #     key: |
      #       ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
      #     restore-keys: |
      #       ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
      #     path: |
      #       priv/plts

      # # Create PLTs if no cache was found
      # - name: Create PLTs
      #   if: steps.plt_cache.outputs.cache-hit != 'true'
      #   run: mix dialyzer --plt

      # - name: Run dialyzer
      #   run: mix dialyzer --format github

